syntax = "proto3";

package authorizer.accesscontroller.v1alpha1;

import "authorizer-tech/accesscontroller/v1alpha1/acl.proto";
import "google/api/annotations.proto";

option go_package = "github.com/authorizer-tech/access-controller/api/protos/authorizer-tech/accesscontroller/v1alpha1;acl";

// The service to administer namespace configurations.
service NamespaceConfigService {

  // Adds a new namespace configuration. If the namespace already exists,
  // an AlreadyExists status code is returned.
  rpc AddConfig(AddConfigRequest) returns (AddConfigResponse) {
      option (google.api.http) = {
      post: "/authorizer/access-controller/v1alpha1/namespace-configs",
      body: "*"
    };
  }

  // Read a namespace configuration.
  rpc ReadConfig(ReadConfigRequest) returns (ReadConfigResponse) {
    option (google.api.http) = {
      get: "/authorizer/access-controller/v1alpha1/namespace-configs"
    };
  }

  // Upserts a relation for the given namespace config.
  rpc WriteRelation(WriteRelationRequest) returns (WriteRelationResponse) {
    option (google.api.http) = {
      post: "/authorizer/access-controller/v1alpha1/namespace-configs/{namespace}",
      body: "*"
    };
  }
}

// The request for a NamespaceConfigService.AddConfig rpc.
message AddConfigRequest {
    NamespaceConfig config = 1;
}

// The response for a NamespaceConfigService.AddConfig rpc.
message AddConfigResponse {
    string snaptoken = 1;
}

// The request for a NamespaceConfigService.ReadConfig rpc.
message ReadConfigRequest {
    string namespace = 1;
    string snaptoken = 2;
}

// The response for a NamespaceConfigService.ReadConfig rpc.
message ReadConfigResponse {
    string namespace = 1;
    NamespaceConfig config = 2;
    string snaptoken = 3;
}

// The request for a NamespaceConfigService.WriteRelation rpc.
message WriteRelationRequest {
    string namespace = 1;
    Relation relation = 2;
}

// The response for a NamespaceConfigService.WriteRelation rpc.
message WriteRelationResponse {

}

message NamespaceConfig {
    string name = 1;
    repeated Relation relations = 2;
}

message Relation {
    string name = 1;
    Rewrite rewrite = 2;
}

message Rewrite {
    oneof rewrite_operation {
        SetOperation union = 1;
        SetOperation intersection = 2;
    }
}

message SetOperation {
    message Child {
        message This {}

        oneof child_type {
            This _this = 1;
            ComputedSubjectset computed_subjectset = 2;
            TupleToSubjectset tuple_to_subjectset = 3;
            Rewrite rewrite = 4;
        }
    }

    repeated Child children = 1;
}

message TupleToSubjectset {
    message Tupleset { string relation = 1; }

    Tupleset tupleset = 1;
    ComputedSubjectset computed_subjectset = 2;
}

message ComputedSubjectset {
    string relation = 2;
}