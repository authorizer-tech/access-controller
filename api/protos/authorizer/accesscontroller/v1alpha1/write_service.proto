syntax = "proto3";

package authorizer.accesscontroller.v1alpha1;

import "authorizer/accesscontroller/v1alpha1/acl.proto";
import "google/api/annotations.proto";

option go_package = "github.com/authorizer-tech/access-controller/genprotos/authorizer/accesscontroller/v1alpha1;acl";

// The write service to create and delete Access Control Lists.
service WriteService {

  // Writes one or more relation tuples in a single transaction.
  rpc WriteRelationTuplesTxn(WriteRelationTuplesTxnRequest) returns (WriteRelationTuplesTxnResponse) {
    option (google.api.http) = {
      post: "/authorizer/access-controller/v1alpha1/write",
      body: "*"
    };
  }
}

// The request of a WriteService.WriteRelationTuplesTxn rpc.
message WriteRelationTuplesTxnRequest {

  // The write delta for the relation tuples operated in one single transaction.
  // Either all actions commit or no changes take effect on error.
  //
  // The tuple's etag is used for a consistent read-modify-write request flow.
  // If the etag is not present, the tuple is not validated against the state
  // of the serverside tuple.
  repeated RelationTupleDelta relation_tuple_deltas = 1;
}

// Write-delta for a WriteRelationTuplesTxnRequest.
message RelationTupleDelta {

  enum Action {
    // Unspecified.
    // The `WriteRelationTuplesTxn` rpc ignores this
    // RelationTupleDelta if an action was unspecified.
    ACTION_UNSPECIFIED = 0;

    // Insertion of a new RelationTuple.
    // It is ignored if already existing.
    ACTION_INSERT = 1;

    // Deletion of the RelationTuple.
    // It is ignored if it does not exist.
    ACTION_DELETE = 4;
  }

  // The action to do on the RelationTuple.
  Action action = 1;

  // The target RelationTuple.
  RelationTuple relation_tuple = 2;
}

// The response of a WriteService.WriteRelationTuplesTxn rpc.
message WriteRelationTuplesTxnResponse {

  // The list of the new latest snapshot tokens of the affected RelationTuple,
  // with the same index as specified in the `relation_tuple_deltas` field of
  // the WriteRelationTuplesTxnRequest request.
  //
  // If the RelationTupleDelta_Action was DELETE
  // the snaptoken is empty at the same index.
  repeated string snaptokens = 1;
}