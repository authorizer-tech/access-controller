syntax = "proto3";

package authorizer.accesscontroller.v1alpha1;

import "authorizer/accesscontroller/v1alpha1/acl.proto";

option go_package = "github.com/authorizer-tech/access-controller/genprotos/authorizer/accesscontroller/v1alpha1;acl";

// The service to serve Expand RPC requests.
service ExpandService {

  // Expands all the relation tuples for all of the subjects given
  // in the SubjectSet.
  //
  // Expand follows direct and indirect SubjectSets in a depth-first fashion.
  rpc Expand(ExpandRequest) returns (ExpandResponse);
}

// The request for an ExpandService.Expand rpc.
message ExpandRequest {

  // The SubjectSet to expand.
  SubjectSet subject_set = 1;

  // Optional. The snapshot token that encodes the evaluation timestamp that this request will be evaluated no earlier than.
  //
  // If no snapshot token is provided the expand request is evaluated against the most recently replicated version of the relation
  // tuple storage. Leaving an empty snapshot token will reflect the latest changes, but it may incur a read penalty because the
  // reads have to be directed toward the leaseholder of the replica that serves the data.
  string snaptoken = 2;
}

// The response for an ExpandService.Expand rpc.
message ExpandResponse {

  // The tree the requested SubjectSet expands to. The requested
  // SubjectSet is the subject of the root.
  //
  // This field can be nil in some circumstances.
  SubjectTree tree = 1;
}

// An enumeration defining types of nodes within a SubjectTree.
enum NodeType {

  NODE_TYPE_UNSPECIFIED = 0;

  // A node type which expands to a union of all children.
  NODE_TYPE_UNION = 1;

  // A node type which expands to an intersection of the children.
  NODE_TYPE_INTERSECTION = 3;

  // A node type which is a leaf and contains no children.
  //
  // Its Subject is a subject id string unless the maximum call depth was reached.
  NODE_TYPE_LEAF = 4;
}

message SubjectTree {

  // The type of the node.
  NodeType node_type = 1;

  // The subject this node represents.
  Subject subject = 2;

  // The children of this node.
  //
  // This is unset if `node_type` is `NODE_TYPE_LEAF`.
  repeated SubjectTree children = 3;
}