syntax = "proto3";

package authorizer.accesscontroller.v1alpha1;

import "authorizer/accesscontroller/v1alpha1/acl.proto";
import "google/api/annotations.proto";

option go_package = "github.com/authorizer-tech/access-controller/genprotos/authorizer/accesscontroller/v1alpha1;acl";

// The service to administer namespace configurations.
service NamespaceConfigService {

  // WriteConfig upserts a namespace configuration. If the namespace config already exists,
  // the existing one is overwritten.
  //
  // If the new namespace config removes an existing relation, there must not be any relation
  // tuples that reference it. Otherwise a FAILED_PRECONDITION status is returned. To migrate
  // away from a relation, please move all existing relation tuples referencing it over to the
  // new relation and then delete the old relation once all tuples have been migrated.
  rpc WriteConfig(WriteConfigRequest) returns (WriteConfigResponse) {
    option (google.api.http) = {
      put: "/authorizer/access-controller/v1alpha1/namespace-configs",
      body: "*"
    };
  }

  // Read a namespace configuration.
  rpc ReadConfig(ReadConfigRequest) returns (ReadConfigResponse) {
    option (google.api.http) = {
      get: "/authorizer/access-controller/v1alpha1/namespace-configs"
    };
  }
}

// The request for a NamespaceConfigService.WriteConfig rpc.
message WriteConfigRequest {
    NamespaceConfig config = 1;
}

// The response for a NamespaceConfigService.WriteConfig rpc.
message WriteConfigResponse {

}

// The request for a NamespaceConfigService.ReadConfig rpc.
message ReadConfigRequest {
    string namespace = 1;
    string snaptoken = 2;
}

// The response for a NamespaceConfigService.ReadConfig rpc.
message ReadConfigResponse {
    string namespace = 1;
    NamespaceConfig config = 2;
    string snaptoken = 3;
}

message NamespaceConfig {
    string name = 1;
    repeated Relation relations = 2;
}

message Relation {
    string name = 1;
    Rewrite rewrite = 2;
}

message Rewrite {
    oneof rewrite_operation {
        SetOperation union = 1;
        SetOperation intersection = 2;
    }
}

message SetOperation {
    message Child {
        message This {}

        oneof child_type {
            This this = 1;
            ComputedSubjectset computed_subjectset = 2;
            TupleToSubjectset tuple_to_subjectset = 3;
            Rewrite rewrite = 4;
        }
    }

    repeated Child children = 1;
}

message TupleToSubjectset {
    message Tupleset { string relation = 1; }

    Tupleset tupleset = 1;
    ComputedSubjectset computed_subjectset = 2;
}

message ComputedSubjectset {
    string relation = 2;
}