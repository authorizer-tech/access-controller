{
  "swagger": "2.0",
  "info": {
    "title": "authorizer/accesscontroller/v1alpha1/namespace_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "NamespaceConfigService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/authorizer/access-controller/v1alpha1/namespace-configs": {
      "get": {
        "summary": "Read a namespace configuration.",
        "operationId": "NamespaceConfigService_ReadConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ReadConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace whose config should be read.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NamespaceConfigService"
        ]
      },
      "put": {
        "summary": "WriteConfig upserts a namespace configuration.",
        "description": "If the namespace config already exists, the existing one is overwritten. If the new\nnamespace config removes an existing relation, there must not be any relation tuples\nthat reference it. Otherwise a FAILED_PRECONDITION status is returned.\n\nTo migrate away from a relation, please move all existing relation tuples referencing\nit over to the new relation and then delete the old relation once all tuples have been\nmigrated.",
        "operationId": "NamespaceConfigService_WriteConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1WriteConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1WriteConfigRequest"
            }
          }
        ],
        "tags": [
          "NamespaceConfigService"
        ]
      }
    }
  },
  "definitions": {
    "ChildThis": {
      "type": "object",
      "description": "This references the defined relation directly."
    },
    "SetOperationChild": {
      "type": "object",
      "properties": {
        "this": {
          "$ref": "#/definitions/ChildThis"
        },
        "computedSubjectset": {
          "$ref": "#/definitions/v1alpha1ComputedSubjectset"
        },
        "tupleToSubjectset": {
          "$ref": "#/definitions/v1alpha1TupleToSubjectset"
        },
        "rewrite": {
          "$ref": "#/definitions/v1alpha1Rewrite"
        }
      }
    },
    "TupleToSubjectsetTupleset": {
      "type": "object",
      "properties": {
        "relation": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alpha1ComputedSubjectset": {
      "type": "object",
      "properties": {
        "relation": {
          "type": "string"
        }
      },
      "description": "Computes the set of subjects that have the included relation within the\nsame namespace.\n\nThis is useful to follow relations between an object and subject within\nthe same namespace. If you want anyone with an 'editor' relation to also\nhave 'viewer' this would be a good fit."
    },
    "v1alpha1NamespaceConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the namespace."
        },
        "relations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Relation"
          },
          "description": "The relations that this namespace defines."
        }
      },
      "description": "A namespace config defines the relations that exist between objects and subjects in\nin a namespace."
    },
    "v1alpha1ReadConfigResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "The namespace of the config."
        },
        "config": {
          "$ref": "#/definitions/v1alpha1NamespaceConfig",
          "description": "The namespace config for the given namespace."
        }
      },
      "description": "The response for a NamespaceConfigService.ReadConfig rpc."
    },
    "v1alpha1Relation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the relation (e.g. viewer, editor, or member)."
        },
        "rewrite": {
          "$ref": "#/definitions/v1alpha1Rewrite",
          "description": "The rewrite rule for this relation, or nil if it references itself."
        }
      },
      "description": "A Relation defines a type of relationship between an object and subject.\n\nRelations can have rewrite rules that specify how the relation is\ncomputed relative to other relations defined within the same namespace\nor across other namespaces."
    },
    "v1alpha1Rewrite": {
      "type": "object",
      "properties": {
        "union": {
          "$ref": "#/definitions/v1alpha1SetOperation",
          "description": "Joins the children of the rewrite via set union."
        },
        "intersection": {
          "$ref": "#/definitions/v1alpha1SetOperation",
          "description": "Joins the children of the rewrite via set intersection."
        }
      },
      "description": "Rewrites define sub-expressions that combine operations such as union or intersection. A rewrite\nsub-expression can be recursive and thus allows arbitrary logical expressions to be constructed."
    },
    "v1alpha1SetOperation": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SetOperationChild"
          }
        }
      }
    },
    "v1alpha1TupleToSubjectset": {
      "type": "object",
      "properties": {
        "tupleset": {
          "$ref": "#/definitions/TupleToSubjectsetTupleset",
          "description": "A tupleset defining the relation tuples that relate to the set of subjects that\nthis TupleToSubjectset applies to."
        },
        "computedSubjectset": {
          "$ref": "#/definitions/v1alpha1ComputedSubjectset",
          "description": "The computed set of subjects that are looked up based on the expanded tupleset."
        }
      },
      "description": "Computes a tupleset from the input object, fetches relation tuples matching the\ntupleset, and computes the set of subjects from every fetched relation tuple.\n\nThis is useful to lookup relations in other namespaces or to create complex hierarchies\nbetween objects in multiple namespaces."
    },
    "v1alpha1WriteConfigRequest": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/v1alpha1NamespaceConfig",
          "description": "The namespace config to upsert."
        }
      },
      "description": "The request for a NamespaceConfigService.WriteConfig rpc."
    },
    "v1alpha1WriteConfigResponse": {
      "type": "object",
      "description": "The response for a NamespaceConfigService.WriteConfig rpc."
    }
  }
}
